@page "/bill-list"
@using Gestion_Bunny.Services
@using Gestion_Bunny.Modeles
@using System.Diagnostics
@inject PageTitleService TitleService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject IBillService BillService
@inject IEmployeeService EmployeeService
@inject AuthenticationState AuthService

<div class="pt-4 pb-2 d-flex justify-content-between align-items-center">
    <h2>Factures en attente</h2>
    <div class="icon-container plus-container" @onclick="() => NavigateToBillPage()">
        <img class="plus" src="images/plus.svg" alt="Ajouter" />
    </div>
</div>


@if (billsPending == null)
{
    <p><em>Loading...</em></p>
}
else
{
   
        
    <div class="table-container">
        <table class="table">
            <thead>
                <tr>
                    <th>Actions</th>
                    <th>Numéro de facture</th>
                    <th>Nombre d’items</th>
                    <th>Total</th>
                </tr>
            </thead>
            @if (!isDisposed && AuthService?.CurrentUser?.UserRoleId is int roleId && (roleId == 1 || roleId == 2))
            {
                <tbody>
                    @foreach (var bill in billsPending)
                    {
                        <tr>
                            <td>
                                <!-- Redirect icon -->
                                <div class="icon-container" @onclick="@(() => Navigation.NavigateTo($"/bill/{@bill.Id}"))">
                                    <img src="images/arrow-right-square-fill.svg" alt="Rediriger" />
                                </div>

                            </td>
                            <td>@bill.GenerateInvoiceNumber()</td>
                            <td>@recipeQuantities[bill.Id]</td>
                            <td>@bill.TotalAmount $</td>
                        </tr>
                    }
                </tbody>
            } else
            {
                 <tbody>
                    @foreach (var bill in billsPending.Where(b => b.UserId == AuthService.CurrentUser.Id))
                    {
                        <tr>
                            <td>
                                <!-- Redirect icon -->
                                <div class="icon-container" @onclick="@(() => Navigation.NavigateTo($"/bill/{@bill.Id}"))">
                                    <img src="images/arrow-right-square-fill.svg" alt="Rediriger" />
                                </div>

                            </td>
                            <td>@bill.GenerateInvoiceNumber()</td>
                            <td>@recipeQuantities[bill.Id]</td>
                            <td>@bill.TotalAmount $</td>
                        </tr>
                    }
                </tbody>
            }
        </table>
    </div>
}

<div class="pb-2">
    <h2>Factures complétées</h2>
</div>
@if (billsComplete == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="table-container">
        <table class="table">
            <thead>
                <tr>
                    <th>Actions</th>
                    <th>Numéro de facture</th>
                    <th>Nombre d’items</th>
                    <th>Total</th>
                    <th>Facturé par</th>
                </tr>
            </thead>
            @if (!isDisposed && AuthService?.CurrentUser?.UserRoleId is int roleId && (roleId == 1 || roleId == 2))
            {
            <tbody>
                @foreach (var bill in billsComplete)
                {
                    <tr>
                        <td>
                            <!-- Printer icon -->
                            <div class="icon-container" @onclick="() => HandlePrintAction(bill.Id)">
                                <img src="images/printer-fill.svg" alt="Imprimer" />
                            </div>
                        </td>
                        <td>@bill.GenerateInvoiceNumber()</td>
                        <td>@recipeQuantities[bill.Id]</td>
                        <td>@bill.TotalAmount $</td>
                        <td>@(bill.User?.FirstName ?? "N/A") @(bill.User?.LastName ?? "")</td>
                    </tr>
                }
            </tbody>
            } else
            {
                <tbody>
                    @foreach (var bill in billsComplete.Where(b => b.OrderDate.Date == DateTime.Now.Date))
                    {
                        <tr>
                            <td>
                                <!-- Printer icon -->
                                <div class="icon-container" @onclick="() => HandlePrintAction(bill.Id)">
                                    <img src="images/printer-fill.svg" alt="Imprimer" />
                                </div>
                            </td>
                            <td>@bill.GenerateInvoiceNumber()</td>
                            <td>@recipeQuantities[bill.Id]</td>
                            <td>@bill.TotalAmount $</td>
                            <td>@(bill.User?.FirstName ?? "N/A") @(bill.User?.LastName ?? "")</td>
                        </tr>
                    }
                </tbody>
            }
        </table>
    </div>
}


@code {

    protected override void OnInitialized()
    {
        TitleService.Title = "Liste des factures";
    }

    private List<Modeles.Bill> billsPending = new List<Modeles.Bill>();

    private List<Modeles.Bill> billsComplete = new List<Modeles.Bill>();

    private Dictionary<int, int> recipeQuantities = new();

    private bool isDisposed = false;

    public void Dispose()
    {
        isDisposed = true;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            billsPending = await BillService.GetPendingBillsAsync() ?? new List<Modeles.Bill>();
            billsComplete = await BillService.GetCompletedBillsAsync() ?? new List<Modeles.Bill>();
            foreach (var bill in billsComplete)
            {
                recipeQuantities[bill.Id] = await BillService.GetTotalRecipeQuantityInBillAsync(bill.Id);
            }
            foreach (var bill in billsPending)
            {
                recipeQuantities[bill.Id] = await BillService.GetTotalRecipeQuantityInBillAsync(bill.Id);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de l'initialisation: {ex.Message}");
        }
    }

    // Méthode pour gérer l'action de redirection
    private void NavigateToBillPage(int billId = 0)
    {
        if (billId == 0) { Navigation.NavigateTo($"/bill/{billId}"); }

    }

    // Méthode pour gérer l'action d'impression
    private void HandlePrintAction(int billId)
    {
        Modeles.Bill currentBill = billsComplete.FirstOrDefault(b => b.Id == billId);
        if (currentBill.BillFile != null)
        {
              string downloadsPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), "Downloads");
              string filePath = Path.Combine(downloadsPath, $"{currentBill.GenerateInvoiceNumber()}.pdf");
              File.WriteAllBytes(filePath, currentBill.BillFile);
              Process.Start(new ProcessStartInfo(filePath) { UseShellExecute = true });
        }
    }
}
