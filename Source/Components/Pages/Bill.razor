@page "/bill/{billId:int}"
@using Gestion_Bunny.Services
@using Gestion_Bunny.Modeles
@inject PageTitleService PageTitleService
@inject IRecipeService RecipeService
@inject IBillService BillService
@inject AuthenticationState AuthState
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="container-fluid">
    <div class="row">

        <!-- Left Column: Recipe Categories and List -->
        <div class="col-8 pe-4">

            <div class="d-flex justify-content-center gap-4 mb-4">
                @if (categories == null || !categories.Any())
                {
                    <p>Chargement des catégories...</p>
                }
                else
                {
                    @foreach (var category in categories)
                    {
                        <div class="category-item" @onclick="() => SelectCategory(category.Id)" style="cursor: pointer;">
                            <span>@category.Name</span>
                            <div class="category-underline @(selectedCategoryId == category.Id ? "active" : "")"></div>
                        </div>
                    }
                }
            </div>

            @if (true)
            {
                <div class="row g-4">
                    @foreach (var recipe in recipes_filter)
                    {
                        <div class="col-lg-3 col-md-4 col-sm-6 col-12">
                            <div class="card mx-auto d-flex h-100" @onclick="() => HandleAddAction(recipe.Id)">
                                @if (recipe.Pic != null && recipe.Pic.Length > 0)
                                {
                                    <!-- Convert byte[] to Base64 string -->
                                    <img src="data:image/jpeg;base64,@Convert.ToBase64String(recipe.Pic)" class="card-img-top" alt="Image de la recette" />
                                }
                                else if (!string.IsNullOrEmpty(recipe.Pic?.ToString()))
                                {
                                    <!-- URL image rendering -->
                                    <img src="@recipe.Pic" class="card-img-top" alt="Image de la recette" />
                                }
                                else
                                {
                                    <!-- Fallback image rendering -->
                                    <img src="images/default-recipe-image.jpg" class="card-img-top" alt="Image de la recette" />
                                }

                                <div class="card-body">
                                    <h4 class="card-title mt-2">@recipe.Name</h4>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <p class="text-center">Aucune recette trouvée</p>
            }
        </div>

        <!-- Right Column: Order Summary -->
        <div class="card col-4 bg-darkdark p-3 mt-3  text-light">
            <h4 class="text-center mb-3">Commande #@currentBill.GenerateInvoiceNumber()</h4>

            <div class="order-summary">

                <div class="d-flex justify-content-between align-items-center mb-3 border-bottom pb-2">
                    <div>
                        <span class="fw-bold">Item</span>
                    </div>
                    <div class="text-center">
                        <span class="fw-bold">Quantité</span>
                    </div>
                </div>

                @if (currentOrder != null && currentOrder.Recipes.Any())
                {
                    @foreach (var item in currentOrder.Recipes)
                    {
                        <div class="d-flex justify-content-between align-items-center mb-2 border-bottom pb-2">
                            <div class="d-flex align-items-center">
                                <img src="@item.ImageUrl" class="me-2" style="width: 50px; height: 50px; object-fit: cover;" />
                                <div>
                                    <span>@item.Name</span>
                                    <small class="d-block">@item.Price.ToString("C")</small>
                                </div>
                            </div>
                            <div class="d-flex align-items-center">
                                <button class="btn btn-sm btn-add-color me-2 fw-bold" @onclick="() => HandleAddAction(item.Id)">+</button>
                                <span>@item.Quantity</span>
                                <button class="btn btn-sm btn-remove-color ms-2 fw-bold" @onclick="() => HandleRemoveAction(item.Id)">-</button>
                            </div>
                        </div>
                    }

                    <div class="d-flex justify-content-between mt-3">
                        <strong>Sous-total</strong>
                        <span>@currentOrder.Subtotal.ToString("C")</span>
                    </div>
                    <div class="d-flex justify-content-between mt-2">
                        <strong>TVQ + TVS</strong>
                        <span>@currentOrder.Tax.ToString("C")</span>
                    </div>
                    <div class="d-flex justify-content-between mt-2">
                        <strong>Total</strong>
                        <span>@currentOrder.Total.ToString("C")</span>
                    </div>

                    <div class="mt-3 d-grid gap-2">
                        <button class="btn btn-secondary" @onclick="HandleBreakAction">Mettre en attente</button>
                        <button class="btn btn-primary"  @onclick="HandleCloseAction">Fermer facture</button>
                    </div>
                }
                else
                {
                    <p class="text-center mb-3">Aucun article dans la commande</p>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private int selectedCategoryId = 1;
    private List<Recipe> recipes = new List<Recipe>();
    private List<(Recipe Recipe, int Quantity)> recipes_order = new List<(Recipe Recipe, int Quantity)>();
    private List<Recipe> recipes_filter = new List<Recipe>();
    private List<RecipeCategory> categories = new List<RecipeCategory>();
    private CurrentOrder currentOrder = new CurrentOrder();
    private Modeles.Bill currentBill = new Modeles.Bill();

    [Parameter]
    public int billId { get; set; }

    private void SelectCategory(int categoryId)
    {
        selectedCategoryId = categoryId;
        recipes_filter = selectedCategoryId == 0 ? recipes.ToList() : recipes.Where(r => r.RecipeCategoryId == selectedCategoryId).ToList();
    }

    protected override void OnInitialized()
    {
        PageTitleService.Title = "Facture";

    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            categories = await RecipeService.GetCategoriesAsync();
            recipes = await RecipeService.GetRecipesAsync();

            if (billId !=0){
                currentBill = await BillService.GetBillByIdAsync(billId);
                recipes_order = await BillService.GetBillRecipesByIdAsync(billId);
                foreach (var (recipe, quantity) in recipes_order){
                    HandleAddAction(recipe.Id, quantity);
                }
            }
            SelectCategory(1);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de l'initialisation: {ex.Message}");
        }
    }

    private class Category
    {
        public int Id { get; set; }
        public required string Name { get; set; }
    }

    private class CurrentOrder
    {
        public List<OrderItem> Recipes { get; set; } = new List<OrderItem>();
        public decimal Subtotal => Recipes.Sum(item => (decimal)item.Price * item.Quantity);
        public decimal Tax => decimal.Round(Subtotal * 0.15m, 2);
        public decimal Total => Subtotal + Tax;
    }

    private class OrderItem
    {
        public int Id { get; set; }
        public required string Name { get; set; }
        public decimal Price { get; set; }
        public int Quantity { get; set; }
        public required string ImageUrl { get; set; }
    }

    private void HandleAddAction(int recipeId, int quantity = 1)
    {
        // TODO: Vérifier si les ingrédients sont disponibles
        if (currentOrder.Recipes.Any(item => item.Name == recipes.First(r => r.Id == recipeId).Name))
        {
            currentOrder.Recipes.First(item => item.Name == recipes.First(r => r.Id == recipeId).Name).Quantity++;
        }
        else
        {
            currentOrder.Recipes.Add(new OrderItem
            {
                Id = recipeId,
                Name = recipes.First(r => r.Id == recipeId).Name,
                Price = recipes.First(r => r.Id == recipeId).Price,
                Quantity = quantity,
                ImageUrl = recipes.First(r => r.Id == recipeId).Pic != null && recipes.First(r => r.Id == recipeId).Pic.Length > 0
                    ? $"data:image/jpeg;base64,{Convert.ToBase64String(recipes.First(r => r.Id == recipeId).Pic)}"
                    : "images/default-recipe-image.jpg"
            });
        }
    }

    private void HandleRemoveAction(int recipeId)
    {
        _ = JSRuntime.InvokeVoidAsync("console.log", "Bill added successfully.");
        if (currentOrder.Recipes.Any(item => item.Name == recipes.First(r => r.Id == recipeId).Name))
        {
            var item = currentOrder.Recipes.First(item => item.Name == recipes.First(r => r.Id == recipeId).Name);
            if (item.Quantity > 1)
            {
                item.Quantity--;
            }
            else
            {
                currentOrder.Recipes.Remove(item);
            }
        }
    }

    private async Task HandleBreakAction()
    {
        if (billId != 0)
        {
            currentBill.TotalAmount = currentOrder.Total;
            currentBill.OrderDate = DateTime.UtcNow;

            var newBillRecipes = currentOrder.Recipes.Select(recipe => new BillRecipe
                {
                    BillId = currentBill.Id, 
                    RecipeId = recipe.Id,
                    Quantity = recipe.Quantity
                }).ToList();

            await BillService.UpdateBillAsync(currentBill, newBillRecipes);

            Navigation.NavigateTo("/bill-list");
        }
        else
        {
            try
            {
                Modeles.Bill bill = new Modeles.Bill
                {
                    UserId = AuthState.CurrentUser.Id,
                    OrderDate = DateTime.UtcNow,
                    TotalAmount = currentOrder.Total,
                    BillRecipes = currentOrder.Recipes.Select(recipe => new BillRecipe
                    {
                        RecipeId = recipe.Id,
                        Quantity = recipe.Quantity
                    }).ToList()
                };

                await BillService.AddBillAsync(bill);
                Console.WriteLine("Bill added successfully.");
                await JSRuntime.InvokeVoidAsync("console.log", "Bill added successfully.");


                Navigation.NavigateTo("/bill-list");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error adding bill: {ex.Message}");
                await JSRuntime.InvokeVoidAsync("console.error", $"Error adding bill: {ex.Message}");
            }
        }
    }

    private async Task HandleCloseAction()
    {
        //TODO : Vérification des ingrédients + Génération du pdf
        byte[] tempBytes = new byte[16]; // 16-byte array - Temp
        new Random().NextBytes(tempBytes); // Fill with random - Temp
        if (billId != 0)
        {
            currentBill.TotalAmount = currentOrder.Total;
            currentBill.OrderDate = DateTime.UtcNow;
            currentBill.BillFile = tempBytes;

            var newBillRecipes = currentOrder.Recipes.Select(recipe => new BillRecipe
                {
                    BillId = currentBill.Id, 
                    RecipeId = recipe.Id,
                    Quantity = recipe.Quantity
                }).ToList();

            await BillService.UpdateBillAsync(currentBill, newBillRecipes);

            Navigation.NavigateTo("/bill-list");
        }
        else
        {
            try
            {
                Modeles.Bill bill = new Modeles.Bill
                    {
                        UserId = AuthState.CurrentUser.Id,
                        OrderDate = DateTime.UtcNow,
                        TotalAmount = currentOrder.Total,
                        BillFile = tempBytes,
                        BillRecipes = currentOrder.Recipes.Select(recipe => new BillRecipe
                        {
                            RecipeId = recipe.Id,
                            Quantity = recipe.Quantity
                        }).ToList()
                    };

                await BillService.AddBillAsync(bill);
                
                Console.WriteLine("Bill added successfully.");
                await JSRuntime.InvokeVoidAsync("console.log", "Bill added successfully.");


                Navigation.NavigateTo("/bill-list");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error adding bill: {ex.Message}");
                await JSRuntime.InvokeVoidAsync("console.error", $"Error adding bill: {ex.Message}");
            }
        }
    }
}