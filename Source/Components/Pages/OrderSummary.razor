@page "/order-summary"
@using Gestion_Bunny.Modeles
@using Gestion_Bunny.Services
@inject IOrderService OrderService
@inject IOrderCartService OrderCartService
@inject AuthenticationState AuthState
@inject PageTitleService TitleService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject IPDFService PDFService

<div class="container d-flex justify-content-center mt-4">
    <div class="position-fixed bottom-0 end-0 p-3 me-4">
        <button class="btn btn-primary" @onclick="ScrollToBottom">Descendre jusqu'en bas</button>
    </div>


    <div class="card p-4 shadow bg-dark text-light" style="max-width: 500px; width: 100%;">
        @if (orderedIngredients != null && orderedIngredients.Count > 0)
        {
        <h2 class="text-center mb-3">Détail de la commande</h2>

        <div class="order-summary">
            
                  <div class="d-flex justify-content-between align-items-center mb-3 border-bottom pb-2">
                     <div>
                        <span class="fw-bold">Item</span>
                    </div>
                    <div class="text-center">
                        <span class="fw-bold">Quantité</span>
                    </div>
                    <div class="text-end">
                        <span class="fw-bold">Sous-total</span>
                    </div>
                          </div>
                @foreach (var item in orderedIngredients)
                {
                    <div class="d-flex justify-content-between align-items-center mb-3 border-bottom pb-2">
                        <div class="d-flex flex-column" style="flex: 5;">
                            <span class="fw-bold">@item.Key.Name</span>
                            <small class="d-block">@item.Key.Price.ToString("C")</small>
                        </div>
                        <div class="d-flex flex-column" style="flex: 3; text-align: center;">
                            <span class="fw-bold">@item.Value x @item.Key.QuantityPerDeliveryUnit</span>
                        </div>
                        <div class="d-flex flex-column" style="flex: 5; text-align: end;">
                            <span class="fw-bold">@((item.Key.Price * item.Value).ToString("C"))</span>
                        </div>
                    </div>


                }

                @{
                    var sousTotal = orderedIngredients.Sum(kv => kv.Key.Price * kv.Value);
                    var tps = sousTotal * 0.05m;
                    var tvq = sousTotal * 0.09975m;
                    var totalAvecTaxes = sousTotal + tps + tvq;
                }

                <div class="d-flex justify-content-between mt-3">
                    <strong>Sous-total</strong>
                    <span class="fw-bold">@sousTotal.ToString("C")</span>
                </div>

                <div class="d-flex justify-content-between">
                    <strong>TPS (5%)</strong>
                    <span class="fw-bold">@tps.ToString("C")</span>
                </div>

                <div class="d-flex justify-content-between">
                    <strong>TVQ (9.975%)</strong>
                    <span class="fw-bold">@tvq.ToString("C")</span>
                </div>

                <div class="d-flex justify-content-between mt-3 border-top pt-2">
                    <strong>Total avec taxes</strong>
                    <span class="fw-bold">@totalAvecTaxes.ToString("C")</span>
                </div>

                <div class="mt-3 d-grid gap-2">
                    <button class="btn btn-secondary" @onclick="OnCancel">Annuler</button>
                    <button class="btn btn-primary" @onclick="OnConfirmOrder">Commander</button>
                </div>
            </div>
        }
        else
        {
            <p class="text-center text-muted">Aucun ingrédient dans la commande</p>
        }
        
    </div>
    
</div>

<div id="scrollTarget">
    
</div>

@code {
    [Parameter, SupplyParameterFromQuery] public int id { get; set; }

    private Dictionary<Ingredient, int>? orderedIngredients;




    protected override void OnInitialized()
    {
        TitleService.Title = "Résumé de la commande";
    }

    protected override async Task OnInitializedAsync()
    {

        // Simulated order data
        await Task.Delay(500);

        if (AuthState.CurrentUser != null)
        {
            orderedIngredients = OrderCartService.GetOrderQuantitiesForEmployee(AuthState.CurrentUser.Id);
        }
    }

    private async Task OnConfirmOrder()
    {
        try
        {
            var ingredientsInCart = OrderCartService.GetOrderQuantitiesForEmployee(AuthState.CurrentUser.Id);

            if (ingredientsInCart.Count == 0)
            {
                _ = JSRuntime.InvokeVoidAsync("console.log", "Aucun ingrédient ajouté à la commande.");
                return;
            }

            var orderedIngredients = ingredientsInCart.Select(ingredient => new Modeles.OrderIngredient
                    {
                        IngredientId = ingredient.Key.Id,
                        Quantity = ingredient.Value
                    }).ToList();        

            var sousTotal = ingredientsInCart.Sum(x => x.Value * x.Key.Price);
            var tps = sousTotal * 0.05m;
            var tvq = sousTotal * 0.09975m;
            var totalAvecTaxes = sousTotal + tps + tvq;

            var newOrder = new Modeles.Order
                {
                    UserId = AuthState.CurrentUser.Id,
                    OrderDate = DateTime.UtcNow,
                    IsDelivered = false,
                    TotalAmount = totalAvecTaxes,
                    OrderIngredients = orderedIngredients
                };


            OrderService.AddOrder(newOrder);

            var orderIngredients = ingredientsInCart.Select(ingredient => 
                (ingredient.Key, ingredient.Value)
            ).ToList();

            newOrder.OrderFill = PDFService.GenerateOrderPdf(newOrder, orderIngredients);

            OrderService.UpdateOrder(newOrder);
            
            _ = JSRuntime.InvokeVoidAsync("console.log", "Commande confirmée avec succès !");

            OrderCartService.ClearOrder(AuthState.CurrentUser.Id);

            // Rediriger vers la page de résumé de la commande
            Navigation.NavigateTo("/order-list");
        }
        catch (Exception ex)
        {
            _ = JSRuntime.InvokeVoidAsync("console.log", $"Erreur lors de la confirmation de la commande: {ex.Message}");
        }
    }

    private void OnCancel()
    {
       
       Navigation.NavigateTo("/order-list");
       
    }

    private async Task ScrollToBottom()
    {
        await JSRuntime.InvokeVoidAsync("scrollToElement", "scrollTarget");
    }

}