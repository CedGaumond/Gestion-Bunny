@page "/recipe/{IdString?}"
@using Gestion_Bunny.Modeles
@using Gestion_Bunny.Services
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager Navigation
@inject IRecipeService RecipeService
@inject IIngredientService IngredientService
@inject IJSRuntime JSRuntime
@inject PageTitleService TitleService

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-10">
            <div class="p-4 shadow-lg rounded bg-custom">
                <h3 class="text-center">@(Id.HasValue ? "Modifier une recette" : "Ajouter une recette")</h3>

                <div class="mb-3">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @errorMessage
                        </div>
                    }
                </div>

                <EditForm Model="recipe" OnValidSubmit="Save">
                    <DataAnnotationsValidator />

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="name" class="form-label">Nom</label>
                                <InputText id="name" class="form-control" @bind-Value="recipe.Name" required />
                            </div>

                            <div class="mb-3">
                                <label for="price" class="form-label">Prix</label>
                                <InputNumber id="price" class="form-control" @bind-Value="recipe.Price" required />
                            </div>

                            <div class="mb-3">
                                <label for="image" class="form-label">Image</label>
                                <InputFile class="form-control" OnChange="HandleFileSelected" accept=".jpg, .jpeg, .png, .gif" />
                                @if (recipe.Pic != null)
                                {
                                    <img src="data:image/jpeg;base64,@Convert.ToBase64String(recipe.Pic)" 
                                         alt="Preview" class="img-fluid mt-2 rounded" style="max-height: 150px;" />
                                }
                            </div>

                            <div class="mb-3">
                                <label for="category" class="form-label">Catégorie</label>
                                <InputSelect id="category" class="form-control" @bind-Value="selectedCategorieId">
                                    <option value="0">-- Sélectionner une catégorie --</option>
                                    @foreach (var cat in availableCategorie)
                                    {
                                        <option value="@cat.Id">@cat.Name</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="p-3 shadow-sm rounded bg-custom">
                                <h4 class="text-center">Ingrédients</h4>

                                <div class="d-flex mb-3">
                                    <InputSelect class="form-control me-2" @bind-Value="selectedIngredientId">
                                        <option value="0">-- Sélectionner --</option>
                                        @if (availableIngredients != null)
                                        {
                                            @foreach (var ing in GetAvailableIngredients())
                                            {
                                                <option value="@ing.Id">@ing.Name</option>
                                            }
                                        }
                                    </InputSelect>
                                    <button type="button" class="icon-container btn btn-add-color" 
                                            @onclick="AddIngredient" disabled="@(selectedIngredientId <= 0)">
                                        <img class="plus" src="images/plus.svg" alt="Ajouter" />
                                    </button>
                                </div>

                                <div>
                                    @if (recipe.RecipeIngredients != null)
                                    {
                                        @foreach (var itemRecipe in recipe.RecipeIngredients)
                                        {
                                            <div class="d-flex align-items-center mb-2">
                                                <span class="form-control me-2">@(itemRecipe.Ingredient?.Name ?? "Unknown")</span>
                                                <InputNumber class="form-control me-2" placeholder="Quantité" 
                                                           @bind-Value="itemRecipe.Quantity" />
                                                <button type="button" class="icon-container btn btn-remove-color" 
                                                        @onclick="() => RemoveIngredient(itemRecipe)">
                                                    <img class="plus" src="images/x.svg" alt="Retirer" />
                                                </button>
                                            </div>
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="d-flex justify-content-center mt-4">
                        <button type="submit" class="btn btn-primary">@(Id.HasValue ? "Mettre à jour" : "Ajouter")</button>
                        <button type="button" class="btn btn-secondary mx-2" @onclick="Cancel">Annuler</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter, SupplyParameterFromQuery] public string? IdString { get; set; }
    private int? Id => int.TryParse(IdString, out var id) ? id : null;

    private Recipe recipe = new() { RecipeIngredients = new List<RecipeIngredient>() };
    private int selectedIngredientId;
    private int selectedCategorieId;
    private List<Ingredient> availableIngredients = new();
    private List<RecipeCategory> availableCategorie = new();
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        TitleService.Title = "Formulaire de gestion des recettes";
        try
        {
            var dbCategories = RecipeService.GetCategories();
            availableCategorie = dbCategories?.ToList() ?? new List<RecipeCategory>();

            var dbIngredients = IngredientService.GetAllIngredients();
            availableIngredients = dbIngredients?.ToList() ?? new List<Ingredient>();

            if (Id.HasValue)
            {
                var existingRecipe = RecipeService.GetRecipeById(Id.Value);
                if (existingRecipe != null)
                {
                    recipe = existingRecipe;
                    recipe.RecipeIngredients ??= new List<RecipeIngredient>();
                    selectedCategorieId = existingRecipe.RecipeCategoryId;
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading data: {ex.Message}");
        }
    }

    private IEnumerable<Ingredient> GetAvailableIngredients()
    {
        if (availableIngredients == null || recipe?.RecipeIngredients == null)
            return new List<Ingredient>();

        return availableIngredients.Where(ing => 
            !recipe.RecipeIngredients.Any(ir => ir.IngredientId == ing.Id));
    }

private async Task HandleFileSelected(InputFileChangeEventArgs e)
{
    try
    {
        var file = e.File;
        if (file != null)
        {
            var maxFileSize = 1024 * 1024 * 5;
            if (file.Size > maxFileSize)
            {
                errorMessage = $"La taille du fichier doit être inférieure à 5 Mo.";
                await ClearFileInput();
                recipe.Pic = null; 
                return;
            }

        
            var allowedImageTypes = new[] { "image/jpeg", "image/png", "image/gif" };
            if (!allowedImageTypes.Contains(file.ContentType))
            {
                errorMessage = $"Veuillez télécharger une image valide (PNG, JPG, GIF).";
                await ClearFileInput(); 
                recipe.Pic = null; 
                return;
            }

            using var stream = file.OpenReadStream(maxFileSize);
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            recipe.Pic = ms.ToArray(); 
        }
    }
    catch (Exception ex)
    {
        errorMessage = $"Erreur lors du téléchargement du fichier : {ex.Message}";
        recipe.Pic = null; 
    }
}

private async Task ClearFileInput()
{
    await JSRuntime.InvokeVoidAsync("eval", "document.querySelector('input[type=file]').value = '';"); 
}

    private void AddIngredient()
    {
        if (selectedIngredientId <= 0) return;

        var ingredient = availableIngredients.FirstOrDefault(i => i.Id == selectedIngredientId);
        if (ingredient != null && !recipe.RecipeIngredients.Any(i => i.IngredientId == selectedIngredientId))
        {
            recipe.RecipeIngredients.Add(new RecipeIngredient 
            { 
                RecipeId = recipe.Id,
                IngredientId = selectedIngredientId,
                Ingredient = ingredient,
                Quantity = 1
            });
            selectedIngredientId = 0;
        }
    }

    private void RemoveIngredient(RecipeIngredient itemRecipe)
    {
        if (recipe.RecipeIngredients != null)
        {
            recipe.RecipeIngredients.Remove(itemRecipe);
        }
    }

   private async Task Save()
   {
        try
        {
            if (!ValidateForm())
            {
                return;
            }

            recipe.RecipeCategoryId = selectedCategorieId;

            var recipeTosave = new Recipe
            {
                Id = recipe.Id,
                Name = recipe.Name,
                Price = recipe.Price,
                Pic = recipe.Pic,
                RecipeCategoryId = recipe.RecipeCategoryId,
                IsDeleted = false,
                DeletedDate = null,
                RecipeIngredients = recipe.RecipeIngredients.Select(ir => new RecipeIngredient
                {
                    IngredientId = ir.IngredientId,
                    Quantity = ir.Quantity
                }).ToList()
            };

            if (Id.HasValue)
            {
                recipeTosave.Id = Id.Value;
                RecipeService.UpdateRecipe(recipeTosave);
            }
            else
            {
                RecipeService.AddRecipe(recipeTosave);
            }

            Navigation.NavigateTo("/recipe-list");
        }
        catch (Exception ex)
        {
            var innerErrorMessage = ex.InnerException?.Message ?? ex.Message;
            errorMessage = $"Erreur lors de la sauvegarde de la recette : {innerErrorMessage}";
        }
   }

    private bool ValidateForm()
    {
        if (string.IsNullOrWhiteSpace(recipe.Name))
        {
            errorMessage = $"Le nom de la recette est requis.";
            return false;
        }

        if (recipe.Price <= 0)
        {
            errorMessage = $"Le prix doit être supérieur à 0.";
            return false;
        }

        if (selectedCategorieId <= 0)
        {
            errorMessage = $"Veuillez sélectionner une catégorie.";
            return false;
        }

        return true;
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/recipe-list");
    }
}