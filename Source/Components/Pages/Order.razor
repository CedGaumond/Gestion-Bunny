@page "/order"
@using Gestion_Bunny.Services
@using Gestion_Bunny.Modeles
@inject PageTitleService TitleService
@inject NavigationManager Navigation
@inject AuthenticationState AuthState
@inject IIngredientService IngredientService
@inject IOrderCartService OrderCartService
@inject IOrderService OrderService
@inject IJSRuntime JSRuntime

<div class="row mb-3 align-items-center">
    <div class="col-md-4">
        <label for="filter" class="form-label">Filtrer par nom</label>
        <div class="input-group">
            <input type="text" id="filter" class="form-control" 
                   placeholder="Rechercher un ingrédient" 
                   @bind-value="filterText" 
                   @bind-value:event="oninput"
                   @onkeyup="OnFilterChanged" />
            @if (!string.IsNullOrEmpty(filterText))
            {
                <button class="btn btn-outline-secondary btn-sm" type="button" @onclick="ClearFilter">
                    ✕
                </button>
            }
        </div>
    </div>
    <div class="col-md-4">
        <label class="form-label">Trier par</label>
        <select class="form-select form-select-sm" @onchange="OnSortColumnChanged">
            <option value="Name">Nom</option>
            <option value="QuantityRemaining">Quantité restante</option>
            <option value="MinimumThresholdNotification">Seuil minimum</option>
        </select>
    </div>
    <div class="col-md-2">
        <button class="btn btn-outline-secondary btn-sm mt-4" @onclick="ToggleSortDirection">
            @(sortAscending ? "▲" : "▼")
        </button>
    </div>
    <div class="text-center col-md-2 mt-4">
        <button class="btn btn-primary" @onclick="OnConfirmOrder">
            Confirmer la commande
        </button>
    </div>
</div>

@if (isLoading)
{
    <p><em>Chargement des ingrédients...</em></p>
}
else if (!filteredIngredients.Any())
{
    <p><em>Aucun ingrédient trouvé.</em></p>
}
else
{
    <div class="table-container d-flex flex-column vh-100">
        <table class="table flex-grow-1">
            <thead>
                <tr>
                    <th>Actions</th>
                    <th>Nom</th>
                    <th>Quantité restante</th>
                    <th>Qté/unité livraison</th>
                    <th>Seuil minimum</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var ingredient in filteredIngredients)
                {
                    <tr>
                        <td>
                            <div class="d-flex align-items-center gap-2">
                                <button class="btn btn-sm btn-add-color me-2 fw-bold custom-btn" @onclick="() => HandleAddAction(ingredient.Id)"><i class="bi bi-plus"></i></button>
                                <input type="number" class="form-control custom-input"
                                       placeholder="0"
                                       min="0"
                                       step="1"
                                       value="@ingredientQuantities.GetValueOrDefault(ingredient.Id, 0)"
                                       @oninput="(e) => UpdateOrderIngredient(ingredient, e.Value?.ToString())" />


                                <button class="btn btn-sm btn-remove-color ms-2 fw-bold custom-btn" @onclick="() => HandleRemAction(ingredient.Id)"><i class="bi bi-dash"></i></button>
                            </div>
                        </td>
                        <td>@ingredient.Name</td>
                        <td>@ingredient.QuantityRemaining</td>
                        <td>@ingredient.QuantityPerDeliveryUnit</td>
                        <td>@ingredient.MinimumThresholdNotification</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<Ingredient>? ingredients;
    private List<Ingredient> filteredIngredients = new List<Ingredient>();
    private Dictionary<int, float> ingredientQuantities = new();


    [Parameter, SupplyParameterFromQuery] public int id { get; set; }

    private string filterText = string.Empty;

    private bool isLoading = true;
    private string sortColumn = "Name";
    private bool sortAscending = false;

    protected override void OnInitialized()
    {
        TitleService.Title = "Nouvelle Commande";
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ingredients = await IngredientService.GetAllIngredients();
            filteredIngredients = ingredients ?? new List<Ingredient>();

            var existingQuantities = OrderCartService.GetOrderQuantitiesForEmployee(AuthState.CurrentUser.Id);
            foreach (var ingredient in filteredIngredients)
            {

                if (existingQuantities.ContainsKey(ingredient))
                {
                    ingredientQuantities[ingredient.Id] = existingQuantities[ingredient];
                }
                else
                {
                    ingredientQuantities[ingredient.Id] = 0;
                }
            }

            SortIngredients();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Erreur de chargement des ingrédients: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }



    private void OnFilterChanged()
    {
        if (ingredients == null) return;

        filteredIngredients = string.IsNullOrWhiteSpace(filterText)
            ? ingredients
            : ingredients.Where(i => 
                i.Name.Contains(filterText, StringComparison.OrdinalIgnoreCase) ||
                i.QuantityRemaining.ToString().Contains(filterText, StringComparison.OrdinalIgnoreCase) ||
                i.QuantityPerDeliveryUnit.ToString().Contains(filterText, StringComparison.OrdinalIgnoreCase) ||
                i.MinimumThresholdNotification.ToString().Contains(filterText, StringComparison.OrdinalIgnoreCase)
            ).ToList();


        SortIngredients();

        StateHasChanged();
    }

    private async Task OnConfirmOrder()
    {
        try
        {
            var ingredientsInCart = OrderCartService.GetOrderQuantitiesForEmployee(AuthState.CurrentUser.Employee.Id);

            if (ingredientsInCart.Count == 0)
            { 
                _ = JSRuntime.InvokeVoidAsync("console.log", "Aucun ingrédient ajouté à la commande.");
                return;
            }

            
            var newOrder = new Modeles.Order
                {
                    UserId = AuthState.CurrentUser.Id,  
                    OrderDate = DateTime.Now,  
                    IsDelivered = false,
                    TotalAmount = ingredientsInCart.Sum(x => x.Value * x.Key.Price), 
                    OrderIngredients = ingredientsInCart.Select(ingredient => new Modeles.OrderIngredient
                    {
                        IngredientId = ingredient.Key.Id, 
                        Quantity = ingredient.Value  
                    }).ToList() 
                };

             await OrderService.AddOrderAsync(newOrder);

            _ = JSRuntime.InvokeVoidAsync("console.log", "Commande confirmée avec succès !");

            // Rediriger vers la page de résumé de la commande
            Navigation.NavigateTo("/order-summary");
        }
        catch (Exception ex)
        {
            _ = JSRuntime.InvokeVoidAsync("console.log", $"Erreur lors de la confirmation de la commande: {ex.Message}");
        }
    }



    private void OnSortColumnChanged(ChangeEventArgs e)
    {
        sortColumn = e.Value?.ToString() ?? "Name";
        SortIngredients();
        StateHasChanged();
    }


    private void SortIngredients()
    {
        filteredIngredients = sortColumn switch
        {
            "Name" => sortAscending 
                ? filteredIngredients.OrderBy(i => i.Name).ToList()
                : filteredIngredients.OrderByDescending(i => i.Name).ToList(),
            "QuantityRemaining" => sortAscending
                ? filteredIngredients.OrderBy(i => i.QuantityRemaining).ToList()
                : filteredIngredients.OrderByDescending(i => i.QuantityRemaining).ToList(),
            "MinimumThresholdNotification" => sortAscending
                ? filteredIngredients.OrderBy(i => i.MinimumThresholdNotification).ToList()
                : filteredIngredients.OrderByDescending(i => i.MinimumThresholdNotification).ToList(),
            _ => filteredIngredients
        };
    }


    private void ToggleSortDirection()
    {
        sortAscending = !sortAscending;
        SortIngredients();
        StateHasChanged();
    }


    private void ClearFilter()
    {
        filterText = string.Empty;
        OnFilterChanged();
    }

    private async Task HandleAddAction(int ingredientId)
    {
        try
        {

            await IngredientService.DeleteIngredient(ingredientId);


            ingredients = ingredients?.Where(i => i.Id != ingredientId).ToList();


            OnFilterChanged();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Erreur lors de la suppression de l'ingrédient: {ex.Message}");
        }
    }

    private void HandleRemAction(int ingredientId)
    {
        try
        {
            Console.WriteLine($"Suppression de l'ingrédient avec ID : {ingredientId}");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Erreur lors de la suppression de l'ingrédient: {ex.Message}");
        }
    }

    private void UpdateOrderIngredient(Ingredient ingredient, string? value)
    {
        if (int.TryParse(value, out int quantity))
        {
            if (quantity > 0)
            {
                ingredientQuantities[ingredient.Id] = quantity;
                OrderCartService.SetIngredientQuantity(AuthState.CurrentUser.Employee.Id, ingredient, quantity); 
            }
            else
            {
                ingredientQuantities[ingredient.Id] = 0;
                OrderCartService.RemoveIngredient(AuthState.CurrentUser.Employee.Id, ingredient);
            }
        }
    }

}