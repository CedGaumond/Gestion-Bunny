@page "/recipe-list"
@using Gestion_Bunny.Services
@inject PageTitleService TitleService

<div class="d-flex justify-content-center gap-4 mb-4">
    @if (categories == null)
    {
        <p>Chargement des catégories...</p>
    }
    else
    {
        @foreach (var category in categories)
        {
            <div class="category-item"
                 @onclick="() => SelectCategory(category.Id)"
                 style="cursor: pointer;">
                <span>@category.Name</span>
                <div class="category-underline @(selectedCategoryId == category.Id ? "active" : "")"></div>
            </div>
        }
    }
</div>



@if (recipes == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row g-4">
        @foreach (var recipe in recipes_filter)
        {
            <div class="col-lg-3 col-md-4 col-sm-6 col-12">
                <div class="card mx-auto">
                    <img src="@recipe.ImageUrl" class="card-img-top" alt="Image de la recette" />
                    <div class="card-body">
                        <h5 class="card-title">@recipe.Name</h5>
                        <p class="card-text">Prix : @recipe.Price.ToString()</p>

                        <div class="d-flex justify-content-center align-items-center gap-3">

                            <div class="icon-container" @onclick="() => HandleEditAction(recipe.Id)">
                                <img src="images/pencil-square.svg" alt="Modifier" class="action-icon" />
                            </div>

                            <div class="icon-container" @onclick="() => HandleDeleteAction(recipe.Id)">
                                <img src="images/trash.svg" alt="Supprimer" class="action-icon" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {

    private int selectedCategoryId = 0;

    private void SelectCategory(int categoryId)
    {
        selectedCategoryId = categoryId;

        if(selectedCategoryId == 1)
        {
            recipes_filter = recipes.ToList();
        }
        else
        {
            // Filtrer les recettes selon la catégorie sélectionnée
            recipes_filter = recipes.Where(r => r.CategoryId == selectedCategoryId).ToList();

        }
    }

    protected override void OnInitialized()
    {
        TitleService.Title = "Liste de recettes";
    }


    private Recipe[] recipes = Array.Empty<Recipe>();
    private List<Recipe> recipes_filter = new();
    private Category[] categories = Array.Empty<Category>();


    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Simuler le chargement asynchrone pour afficher un indicateur de chargement
            await Task.Delay(500);

            var startDate = DateOnly.FromDateTime(DateTime.Now);
            var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
            var urls = new[] { "/images/1.jpg", "/images/2.jpg", "/images/3.jpg", "/images/4.jpg", "/images/5.jpg" };
            var categories_names = new[] { "Tous", "Entrées", "Plat pricipaux", "Boissons", "Desserts"};

            recipes = Enumerable.Range(1, 15).Select(index => new Recipe
                {
                    Id = index,
                    Price = Random.Shared.Next(0, 55),
                    Name = summaries[Random.Shared.Next(summaries.Length)],
                    ImageUrl = urls[index % urls.Length],
                    CategoryId = index % 5

                }).ToArray();

            SelectCategory(1);
            categories = Enumerable.Range(1, 5).Select(index => new Category
                {
                    Id = index,
                    Name = categories_names[index % categories_names.Length] 
                }).ToArray();

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de l'initialisation: {ex.Message}");
        }
    }


    private class Recipe
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public float Price { get; set; }
        public string ImageUrl { get; set; }   
        public int CategoryId { get; set; }
    }

    private class Category
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }

    // Méthode pour gérer l'action de modification
    private void HandleEditAction(int recipeId)
    {
        Console.WriteLine($"Modification de la recette avec ID : {recipeId}");
    }

    // Méthode pour gérer l'action de suppression
    private void HandleDeleteAction(int recipeId)
    {
        Console.WriteLine($"Suppression de la recette avec ID : {recipeId}");
    }
}
