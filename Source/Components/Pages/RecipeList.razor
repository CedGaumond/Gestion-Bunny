@page "/recipe-list"
@using Gestion_Bunny.Services
@using Gestion_Bunny.Modeles
@inject IRecipeService RecipeService
@inject PageTitleService TitleService
@inject NavigationManager Navigation

<div class="d-flex justify-content-center gap-4 mb-4">
    @if (categories == null || !categories.Any())
    {
        <p>Chargement des catégories...</p>
    }
    else
    {
        @foreach (var category in categories)
        {
            <div class="category-item" @onclick="() => SelectCategory(category.Id)" style="cursor: pointer;">
                <span>@category.Name</span>
                <div class="category-underline @(selectedCategoryId == category.Id ? "active" : "")"></div>
            </div>
        }
    }
</div>

@if (true)
{
    <div class="row g-4">
        <div class="col-lg-3 col-md-4 col-sm-6 col-12">
            <div class="card mx-auto h-100 d-flex flex-column add-card">
                <div class="card-body d-flex align-items-center justify-content-center">
                    <div class="icon-container plus-container-big" @onclick="@(() => Navigation.NavigateTo("/recipe"))">
                        <img class="plus-big" src="images/plus.svg" alt="Ajouter" />
                    </div>
                </div>
            </div>
        </div>

       @foreach (var recipe in recipes_filter)
       {
        <div class="col-lg-3 col-md-4 col-sm-6 col-12">
            <div class="card mx-auto h-100 d-flex flex-column">
                    <img class="card-img-top"
                         src="@GetImageSource(recipe)"
                         alt="Image de la recette"
                         onerror="this.onerror=null; this.src='images/default-recipe-image.jpg'" />

                <div class="card-body">
                    <h5 class="card-title">@recipe.Name</h5>
                    <p class="card-text">Prix : @recipe.Price.ToString("F2") $</p>

                    <div class="d-flex justify-content-center align-items-center gap-3">
                        <div class="icon-container" @onclick="@(() => Navigation.NavigateTo($"/recipe/{recipe.Id}"))">
                            <img src="images/pencil-square.svg" alt="Modifier" class="action-icon" />
                        </div>

                        <div class="icon-container" @onclick="() => HandleDeleteAction(recipe.Id)">
                            <img src="images/trash.svg" alt="Supprimer" class="action-icon" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
        }

    </div>
}

@code {
    private int selectedCategoryId = 1;
    private List<Recipe> recipes = new List<Recipe>();
    private List<Recipe> recipes_filter = new List<Recipe>();
    private List<RecipeCategory> categories = new List<RecipeCategory>();

    private void SelectCategory(int categoryId)
    {
        selectedCategoryId = categoryId;
        recipes_filter = selectedCategoryId == 0 ? recipes.ToList() : recipes.Where(r => r.RecipeCategoryId == selectedCategoryId).ToList();
    }

    protected override void OnInitialized()
    {
        TitleService.Title = "Liste de recettes";
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            categories = RecipeService.GetCategories();
            recipes = RecipeService.GetRecipes();
       
            SelectCategory(1);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de l'initialisation: {ex.Message}");
        }
    }


    private async Task HandleDeleteAction(int recipeId)
    {
        try
        {
            RecipeService.DeleteRecipe(recipeId);
            recipes = RecipeService.GetRecipes();
            SelectCategory(selectedCategoryId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error while deleting the recipe: {ex.Message}");
        }
    }

    private string GetImageSource(Recipe recipe)
    {
        if (recipe.Pic != null && recipe.Pic.Length > 0)
        {
            return $"data:image/jpeg;base64,{Convert.ToBase64String(recipe.Pic)}";
        }
        else if (!string.IsNullOrEmpty(recipe.Pic?.ToString()))
        {
            return recipe.Pic.ToString();
        }
        else
        {
            return "images/default-recipe-image.png";
        }
    }
}
