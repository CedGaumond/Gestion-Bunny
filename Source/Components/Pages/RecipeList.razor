@page "/recipe-list"
@using Gestion_Bunny.Services
@using Gestion_Bunny.Modeles
@inject IItemService RecipeService
@inject PageTitleService TitleService
@inject NavigationManager Navigation

<div class="d-flex justify-content-center gap-4 mb-4">
    @if (categories == null || !categories.Any())
    {
        <p>Chargement des catégories...</p>
    }
    else
    {
        @foreach (var category in categories)
        {
            <div class="category-item" @onclick="() => SelectCategory(category.Id)" style="cursor: pointer;">
                <span>@category.Name</span>
                <div class="category-underline @(selectedCategoryId == category.Id ? "active" : "")"></div>
            </div>
        }
    }
</div>

@if (recipes == null || !recipes.Any())
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row g-4">
    <div class="col-lg-3 col-md-4 col-sm-6 col-12">
        <div class="card mx-auto h-100 d-flex flex-column add-card">
            <div class="card-body d-flex align-items-center justify-content-center">
                <div class="icon-container plus-container-big" @onclick="@(() => Navigation.NavigateTo("/recipe"))">
                    <img class="plus-big" src="images/plus.svg" alt="Ajouter" />
                </div>
            </div>
        </div>
    </div>

    @foreach (var recipe in recipes_filter)
        {
            <div class="col-lg-3 col-md-4 col-sm-6 col-12">
                <div class="card mx-auto h-100 d-flex flex-column">
                    <img src="@recipe.Pic" class="card-img-top" alt="Image de la recette" />
                    <div class="card-body">
                        <h5 class="card-title">@recipe.Name</h5>
                        <p class="card-text">Prix : @recipe.Price.ToString()</p>

                        <div class="d-flex justify-content-center align-items-center gap-3">
                            <div class="icon-container" @onclick="@(() => Navigation.NavigateTo($"/recipe/{recipe.Id}"))">
                                <img src="images/pencil-square.svg" alt="Modifier" class="action-icon" />
                            </div>

                            <div class="icon-container" @onclick="() => HandleDeleteAction(recipe.Id)">
                                <img src="images/trash.svg" alt="Supprimer" class="action-icon" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {

    private int selectedCategoryId = 1; // Default to the first category (typically "Entrées" or another category)
    private List<Item> recipes = new List<Item>();
    private List<Item> recipes_filter = new List<Item>();
    private List<ItemCategory> categories = new List<ItemCategory>();

    // This method will be called when a category is clicked
    private void SelectCategory(int categoryId)
    {
        selectedCategoryId = categoryId;

        // Filter recipes based on selected category
        if (selectedCategoryId == 1) // Assuming "Entrées" is category ID 1, show all recipes
        {
            recipes_filter = recipes.ToList();
        }
        else
        {
            // Filter recipes based on selected category
            recipes_filter = recipes.Where(r => r.ItemCategoryId == selectedCategoryId).ToList();
        }
    }

    protected override void OnInitialized()
    {
        TitleService.Title = "Liste de recettes";
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Load categories and recipes from the RecipeService
            categories = await RecipeService.GetCategoriesAsync();
            recipes = await RecipeService.GetRecipesAsync();

            // Initially show all recipes for the default category (selectedCategoryId == 1)
            SelectCategory(selectedCategoryId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de l'initialisation: {ex.Message}");
        }
    }

    private async Task HandleDeleteAction(int recipeId)
    {
        try
        {
            // Handle recipe deletion logic
            await RecipeService.DeleteRecipeAsync(recipeId);

            // After deletion, refresh the list of recipes
            recipes = await RecipeService.GetRecipesAsync();
            SelectCategory(selectedCategoryId); // Refresh the category-based filter

            StateHasChanged(); // Trigger a re-render
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error while deleting the recipe: {ex.Message}");
        }
    }
}
