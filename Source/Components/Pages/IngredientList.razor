@page "/ingredient-list"
@using Gestion_Bunny.Services
@using Gestion_Bunny.Modeles;
@inject PageTitleService TitleService
@inject NavigationManager Navigation
@inject IIngredientService IngredientService

<div class="pt-4 pb-2 d-flex justify-content-end align-items-end">
    <div class="icon-container plus-container" @onclick="@(() => Navigation.NavigateTo("/ingredient"))">
        <img class="plus" src="images/plus.svg" alt="Ajouter" />
    </div>
</div>

@if (ingredients == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="table-container">
        <table class="table">
            <thead>
                <tr>
                    <th>Actions</th>
                    <th>Nom</th>
                    <th>Quantité restante</th>
                    <th>Qté/unité livraison</th>
                    <th>Seuil minimum</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var ingredient in ingredients)
                {
                    <tr>
                        <td>
                            <!-- Edit icon -->
                            <div id="editIcon" class="icon-container" @onclick="@(() => Navigation.NavigateTo($"/ingredient/{ingredient.Id}"))">
                                <img src="images/pencil-square.svg" alt="Modifier" />
                            </div>

                            <!-- Delete icon -->
                            <div id="deleteIcon" class="icon-container" @onclick="() => HandleDeleteAction(ingredient.Id)">
                                <img src="images/trash.svg" alt="Supprimer" />
                            </div>
                        </td>

                        <td>@ingredient.Name</td>
                        <td>@ingredient.QuantityRemaining</td>
                        <td>@ingredient.QuantityPerDeliveryUnit</td>
                        <td>@ingredient.MinimumThresholdNotification</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    protected override void OnInitialized()
    {
        TitleService.Title = "Liste d'ingrédients";
    }

    private List<Ingredient>? ingredients;

    protected override async Task OnInitializedAsync()
    {
      
        ingredients = await IngredientService.GetAllIngredients();
    }

    private async Task HandleDeleteAction(int ingredientId)
    {
        

        try
        {
           
            await IngredientService.DeleteIngredient(ingredientId);

            
            ingredients = ingredients.Where(i => i.Id != ingredientId).ToList();

           
            StateHasChanged();
        }
        catch (Exception ex)
        {
          
            Console.Error.WriteLine($"Erreur lors de la suppression de l'ingrédient: {ex.Message}");
        }
    }
}
