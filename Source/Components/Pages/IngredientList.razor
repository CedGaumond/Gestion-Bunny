@page "/ingredient-list"
@using Gestion_Bunny.Services
@using Gestion_Bunny.Modeles
@inject PageTitleService TitleService
@inject NavigationManager Navigation
@inject IIngredientService IngredientService

<div class="pt-4 pb-2 d-flex justify-content-end align-items-end">
    <div class="icon-container plus-container" @onclick="@(() => Navigation.NavigateTo("/ingredient"))">
        <img class="plus" src="images/plus.svg" alt="Ajouter" />
    </div>
</div>

<!-- Display error message if any -->
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">
        @errorMessage
    </div>
}

<div class="row mb-3 align-items-center">
    <div class="col-md-6">
        <label for="filter" class="form-label">Filtrer par nom</label>
        <div class="input-group">
            <input type="text" id="filter" class="form-control" 
                   placeholder="Rechercher un ingrédient" 
                   @bind-value="filterText" 
                   @bind-value:event="oninput"
                   @onkeyup="OnFilterChanged" />
            @if (!string.IsNullOrEmpty(filterText))
            {
                <button class="btn btn-outline-secondary btn-sm" type="button" @onclick="ClearFilter">
                    ✕
                </button>
            }
        </div>
    </div>
    <div class="col-md-4">
        <label class="form-label">Trier par</label>
        <select class="form-select form-select-sm" @onchange="OnSortColumnChanged">
            <option value="Name">Nom</option>
            <option value="QuantityRemaining">Quantité restante</option>
            <option value="MinimumThresholdNotification">Seuil minimum</option>
        </select>
    </div>
    <div class="col-md-2">
        <button class="btn btn-outline-secondary btn-sm mt-4" @onclick="ToggleSortDirection">
            @(sortAscending ? "▲" : "▼")
        </button>
    </div>
</div>

@if (isLoading)
{
    <p><em>Chargement des ingrédients...</em></p>
}
else if (!filteredIngredients.Any())
{
    <p><em>Aucun ingrédient trouvé.</em></p>
}
else
{
    <div class="table-container">
        <table class="table">
            <thead>
                <tr>
                    <th>Actions</th>
                    <th>Nom</th>
                    <th>Quantité restante</th>
                    <th>Qté/unité livraison</th>
                    <th>Seuil minimum</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var ingredient in filteredIngredients)
                {
                    <tr>
                        <td>
                            <div class="icon-container" @onclick="@(() => Navigation.NavigateTo($"/ingredient/{ingredient.Id}"))">
                                <img src="images/pencil-square.svg" alt="Modifier" />
                            </div>
                            <div class="icon-container" @onclick="() => HandleDeleteAction(ingredient.Id)">
                                <img src="images/trash.svg" alt="Supprimer" />
                            </div>
                        </td>
                        <td>@ingredient.Name</td>
                        <td>@ingredient.QuantityRemaining</td>
                        <td>@ingredient.QuantityPerDeliveryUnit</td>
                        <td>@ingredient.MinimumThresholdNotification</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<Ingredient>? ingredients;
    private List<Ingredient> filteredIngredients = new List<Ingredient>();
    private string filterText = string.Empty;
    private bool isLoading = true;
    private string sortColumn = "Name";
    private bool sortAscending = false;

    protected override void OnInitialized()
    {
        TitleService.Title = "Liste d'ingrédients";
        //IngredientService.OnIngredientUpdated += LoadIngredients;
    }

    public void Dispose()
    {
       //IngredientService.OnIngredientUpdated -= LoadIngredients;
    }

    protected override async Task OnInitializedAsync()
    {
        LoadIngredients();
    }

    private void LoadIngredients()
    {
        try
        {
            ingredients = IngredientService.GetAllIngredients();
            filteredIngredients = ingredients ?? new List<Ingredient>();
            SortIngredients();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Erreur de chargement des ingrédients: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged(); // Force la mise à jour de l'UI
        }
    }

    private void OnFilterChanged()
    {
        if (ingredients == null) return;

        filteredIngredients = string.IsNullOrWhiteSpace(filterText)
            ? ingredients
            : ingredients.Where(i => 
                i.Name.Contains(filterText, StringComparison.OrdinalIgnoreCase) ||
                i.QuantityRemaining.ToString().Contains(filterText, StringComparison.OrdinalIgnoreCase) ||
                i.QuantityPerDeliveryUnit.ToString().Contains(filterText, StringComparison.OrdinalIgnoreCase) ||
                i.MinimumThresholdNotification.ToString().Contains(filterText, StringComparison.OrdinalIgnoreCase)
            ).ToList();

        SortIngredients();
        StateHasChanged();
    }

    private void OnSortColumnChanged(ChangeEventArgs e)
    {
        sortColumn = e.Value?.ToString() ?? "Name";
        SortIngredients();
        StateHasChanged();
    }

    private void SortIngredients()
    {
        filteredIngredients = sortColumn switch
        {
            "Name" => sortAscending 
                ? filteredIngredients.OrderBy(i => i.Name).ToList()
                : filteredIngredients.OrderByDescending(i => i.Name).ToList(),
            "QuantityRemaining" => sortAscending
                ? filteredIngredients.OrderBy(i => i.QuantityRemaining).ToList()
                : filteredIngredients.OrderByDescending(i => i.QuantityRemaining).ToList(),
            "MinimumThresholdNotification" => sortAscending
                ? filteredIngredients.OrderBy(i => i.MinimumThresholdNotification).ToList()
                : filteredIngredients.OrderByDescending(i => i.MinimumThresholdNotification).ToList(),
            _ => filteredIngredients
        };
    }

    private void ToggleSortDirection()
    {
        sortAscending = !sortAscending;
        SortIngredients();
        StateHasChanged();
    }

    private void ClearFilter()
    {
        filterText = string.Empty;
        OnFilterChanged();
    }

    private string errorMessage = string.Empty;

    private async Task HandleDeleteAction(int ingredientId)
    {
        try
        {
            var isUsedInItemRecipe = IngredientService.IsIngredientUsedInItemRecipe(ingredientId);

            if (isUsedInItemRecipe)
            {
               
                errorMessage = "L'ingrédient est utilisé dans une recette d'article et ne peut pas être supprimé.";
                StateHasChanged();
                return;
            }

      
            IngredientService.DeleteIngredient(ingredientId);

            ingredients = ingredients?.Where(i => i.Id != ingredientId).ToList();

            OnFilterChanged();
        }
        catch (Exception ex)
        {
            
            errorMessage = $"Erreur lors de la suppression de l'ingrédient: {ex.Message}";
            StateHasChanged();
        }
    }
}
