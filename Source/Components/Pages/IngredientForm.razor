@page "/ingredient/{IdString?}"
@using Gestion_Bunny.Services
@inject NavigationManager Navigation
@inject PageTitleService TitleService


<div class="container d-flex justify-content-center mt-4">

    <div class="card p-4 shadow" style="max-width: 500px; width: 100%;">
        <h3 class="text-center">@(Id != null ? "Modifier un ingrédient" : "Ajouter un ingrédient")</h3>

        <EditForm Model="ingredient" OnValidSubmit="Save">
            <DataAnnotationsValidator />

            <div class="mb-3">
                <label for="name" class="form-label">Nom</label>
                <InputText id="name" class="form-control" @bind-Value="ingredient.Name" required />
            </div>

            <div class="mb-3">
                <label for="quantityRemaining" class="form-label">Quantité restante</label>
                <InputNumber id="quantityRemaining" class="form-control" @bind-Value="ingredient.QuantityRemaining" required />
            </div>

            <div class="mb-3">
                <label for="quantityPerDeliveryUnit" class="form-label">Quantité par unité de livraison</label>
                <InputNumber id="quantityPerDeliveryUnit" class="form-control" @bind-Value="ingredient.QuantityPerDeliveryUnit" required />
            </div>

            <div class="mb-3">
                <label for="minimumThresholdNotification" class="form-label">Seuil minimum de notification</label>
                <InputNumber id="minimumThresholdNotification" class="form-control" @bind-Value="ingredient.MinimumThresholdNotification" required />
            </div>

            <div class="d-flex justify-content-center">
                <button type="submit" class="btn btn-primary">@(Id.HasValue ? "Mettre à jour" : "Ajouter")</button>
                <button type="button" class="btn btn-secondary  mx-2" @onclick="Cancel">Annuler</button>
            </div>
        </EditForm>
    </div>
</div>


@code {
    [Parameter, SupplyParameterFromQuery] public string? IdString { get; set; }

    private int? Id => int.TryParse(IdString, out var id) ? id : null;

    private Ingredient ingredient = new();

    protected override async Task OnInitializedAsync()
    {
        if (Id.HasValue)
        {
            ingredient = new Ingredient
                {
                    Id = Id.Value,
                    Name = "Test modification",
                    QuantityRemaining = 50,
                    MinimumThresholdNotification = 10,
                    QuantityPerDeliveryUnit = 5
                };
        }
        else
        {
            ingredient = new Ingredient();
        }
    }

    protected override void OnInitialized()
    {
        TitleService.Title = "Ingrédient";
    }

    private async Task Save()
    {
        if (Id.HasValue)
        {
            // await IngredientService.UpdateAsync(Ingredient);
        }
        else
        {
            // await IngredientService.CreateAsync(Ingredient);
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/ingredient-list");
    }

    private class Ingredient
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public decimal QuantityRemaining { get; set; }
        public decimal QuantityPerDeliveryUnit { get; set; }
        public decimal MinimumThresholdNotification { get; set; }
    }

}

