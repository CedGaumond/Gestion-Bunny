@page "/home"
@using Gestion_Bunny.Modeles
@using Gestion_Bunny.Services
@using Microsoft.EntityFrameworkCore
@inject IUserService EmployeeService
@inject IIngredientService IngredientService
@inject INotificationService NotificationService
@inject IScheduleService ScheduleService
@inject AuthenticationState AuthState
@inject NavigationManager NavigationManager
@inject PageTitleService TitleService


<PageTitle>Home</PageTitle>

<div class="home-container">

    @if (lowStockIngredients.Any())
    {
        <div class="notification-panel">
            <div class="notification-header">
                <div class="notification-title">
                    Alerte de stock
                </div>
                <div class="notification-count">
                    @lowStockIngredients.Count ingrédient(s)
                </div>
            </div>

            <div class="notification-body">
                @foreach (var ingredient in lowStockIngredients)
                {
                    <div class="notification-item @(ingredient.QuantityRemaining <= ingredient.MinimumThresholdNotification * 0.5m ? "critical" : "")">
                        <div class="ingredient-info">
                            <div class="ingredient-name">@ingredient.Name</div>
                            <div class="ingredient-details">
                                <span class="quantity">Stock: @ingredient.QuantityRemaining</span>
                                <span class="threshold">Seuil: @ingredient.MinimumThresholdNotification</span>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <div class="notification-footer">
                
            </div>
        </div>
    }

    @if (todayShifts.Any())
    {
        <div class="shift-panel">
            <div class="shift-header">
                <div class="shift-title">Quarts de travail d'aujourd'hui</div>
            </div>

            <div class="shift-body">


                @foreach (var shift in todayShifts)
                {

                    <div class="shift-item">
                        <div class="shift-employee">@shift.User.GetFullName()</div>
                        <div class="shift-time">@shift.ShiftStart.ToString("HH:mm") - @shift.ShiftEnd.ToString("HH:mm")</div>
                    </div>
                }
            </div>
        </div>
    }

    <!-- Le reste du contenu de la page d'accueil ici -->
</div>

<style>
    .home-container {
        width: 100%;
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        display: flex;
        gap: 20px;
        flex-wrap: wrap;
        justify-content: center;
        color: #e0e0e0;
    }

    h1 {
        color: #ffffff;
        font-weight: 300;
        font-size: 32px;
        margin-bottom: 30px;
    }

    .notification-panel,
    .shift-panel {
        flex: 1;
        min-width: 350px;
        background-color: #343a40;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        overflow: hidden;
        transition: transform 0.2s ease-in-out;
    }

        .notification-panel:hover,
        .shift-panel:hover {
            transform: translateY(-3px);
        }

    .notification-header,
    .shift-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 15px;
        background-color: #343a40;
        border-bottom: 2px solid #495057;
        font-weight: bold;
        color: #ffffff;
    }

    .notification-body,
    .shift-body {
        max-height: 350px;
        overflow-y: auto;
        padding: 10px;
        background-color: #343a40;
    }

    .notification-item,
    .shift-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 12px;
        border-bottom: 1px solid #444444;
        background-color: #2a2f36;
        transition: background-color 0.3s ease-in-out;
        border-radius: 5px;
    }

    .ingredient-info {
        display: flex;
        flex-direction: column;
    }

    .ingredient-name,
    .shift-employee {
        font-weight: 600;
        color: #ffffff;
    }

    .ingredient-details,
    .shift-time {
        font-size: 0.85rem;
        color: #cccccc;
    }

    /* Ajout d'une scrollbar stylisée pour les panels */
    .notification-body::-webkit-scrollbar,
    .shift-body::-webkit-scrollbar {
        width: 8px;
    }

    .notification-body::-webkit-scrollbar-thumb,
    .shift-body::-webkit-scrollbar-thumb {
        background-color: #555;
        border-radius: 4px;
    }

    .notification-count {
        background-color: #666666;
        color: white;
        border-radius: 12px;
        padding: 4px 8px;
        font-size: 0.75rem;
        font-weight: 600;
    }

</style>

@code {
    private string platform => DeviceInfo.Platform.ToString();
    private List<Ingredient> lowStockIngredients = new List<Ingredient>();
    private List<Gestion_Bunny.Modeles.Schedule> todayShifts = new List<Gestion_Bunny.Modeles.Schedule>();

    protected override void OnInitialized()
    {
        // Subscribe to authentication state changes
        AuthState.OnAuthenticationStateChanged += StateHasChanged;
        
        // Load low stock ingredients
        LoadLowStockIngredients();

        LoadTodayShifts();

        TitleService.Title = "Page d'accueil";
    }

    private void LoadTodayShifts()
    {
        todayShifts = ScheduleService.GetEmployeeSchedulesForDay(DateTime.UtcNow);
    }

    private void LoadLowStockIngredients()
    {
        lowStockIngredients = NotificationService.GetLowStockIngredients();
    }

    private void NavigateToEditIngredient(int id)
    {
        NavigationManager.NavigateTo($"/ingredients/edit/{id}");
    }

    private void NavigateToIngredients()
    {
        NavigationManager.NavigateTo("/ingredients");
    }

    public void Dispose()
    {
        // Unsubscribe when component is disposed
        AuthState.OnAuthenticationStateChanged -= StateHasChanged;
    }
}