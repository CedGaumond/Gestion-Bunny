@page "/order-list"
@using Gestion_Bunny.Services
@inject PageTitleService TitleService

<div class="d-flex justify-content-between align-items-center">
    <h2>Commandes en attente de réception</h2>
    <div class="icon-container plus-container" @onclick="() => NavigateToOrderPage()">
        <img class="plus" src="images/plus.svg" alt="Ajouter" />
    </div>
</div>


@if (ordersPending == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="table-container">
        <table class="table">
            <thead>
                <tr>
                    <th>Actions</th>
                    <th>Numéro de Commande</th>
                    <th>Date de création</th>
                    <th>Total</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in ordersPending)
                {
                    <tr>
                        <td>
                            <!-- Order received button -->
                            <button class="btn btn-primary" @onclick="() => HandleOrderReceivedAction(order.Id)">
                                Commande reçue
                            </button>


                        </td>

                        <td>@order.Date.ToShortDateString()</td>
                        <td>@order.TemperatureC</td>
                        <td>@order.TemperatureF</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<h2>Commandes complétées</h2>

@if (ordersComplete == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="table-container">
        <table class="table">
            <thead>
                <tr>
                    <th>Actions</th>
                    <th>Numéro de Commande</th>
                    <th>Date de création</th>
                    <th>Total</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in ordersComplete)
                {
                    <tr>
                        <td>
                            <!-- Printer icon -->
                            <div class="icon-container" @onclick="() => HandlePrintAction(order.Id)">
                                <img src="images/printer-fill.svg" alt="Imprimer" />
                            </div>
                        </td>


                        <td>@order.Date.ToShortDateString()</td>
                        <td>@order.TemperatureC</td>
                        <td>@order.TemperatureF</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {

    protected override void OnInitialized()
    {
        TitleService.Title = "Liste des commandes";
    }


    private WeatherForecast[]? ordersPending;
    private WeatherForecast[]? ordersComplete;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate a loading indicator
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        ordersPending = Enumerable.Range(1, 5).Select(index => new WeatherForecast
            {
                Id = index,
                Date = startDate.AddDays(index),
                TemperatureC = Random.Shared.Next(-20, 55),
                Summary = summaries[Random.Shared.Next(summaries.Length)]
            }).ToArray();
        ordersComplete = Enumerable.Range(1, 5).Select(index => new WeatherForecast
            {
                Id = index,
                Date = startDate.AddDays(index),
                TemperatureC = Random.Shared.Next(-20, 55),
                Summary = summaries[Random.Shared.Next(summaries.Length)]
            }).ToArray();
    }

    private class WeatherForecast
    {
        public int Id { get; set; }
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

    // Méthode pour gérer l'action de redirection
    private void NavigateToOrderPage()
    {
        Console.WriteLine($"Navigation vers la page de commande");
    }

    // Méthode pour gérer l'action de commande reçu
    private void HandleOrderReceivedAction(int orderId)
    {
        Console.WriteLine($"Réception de la commande avec ID : {orderId}");
    }

    // Méthode pour gérer l'action d'impression
    private void HandlePrintAction(int orderId)
    {
        Console.WriteLine($"Impression de la facture de la commande avec avec ID : {orderId}");
    }
}
